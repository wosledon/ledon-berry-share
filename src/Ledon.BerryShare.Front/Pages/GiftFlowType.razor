
@page "/gift-flow-type"
@using Ledon.BerryShare.Shared
@using Ledon.BerryShare.Shared.Entities
@inject Services.ApiService ApiService

<h3>流水类型</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <input class="form-control" placeholder="搜索流水类型..." @bind="search" @bind:event="oninput" />
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="OnSearch">搜索</button>
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="ShowAdd">新增</button>
    </div>
</div>

@if (types == null)
{
    <p>加载中...</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>名称</th>
                <th>描述</th>
                <th>创建时间</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in types)
            {
                <tr>
                    <td>@t.Name</td>
                    <td>@t.Description</td>
                    <td>@t.CreateAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button class="btn btn-sm btn-info me-2" @onclick="() => ShowDetail(t)">详情</button>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEdit(t)">编辑</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(pageIndex == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">上一页</button>
            </li>
            <li class="page-item disabled">
                <span class="page-link">第 @pageIndex 页 / 共 @totalPages 页</span>
            </li>
            <li class="page-item @(pageIndex == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">下一页</button>
            </li>
        </ul>
    </nav>
}

<!-- 详情弹窗 -->
<div class="modal fade @(showDetailModal ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" aria-modal="true" role="dialog" @onclick="CloseDetailModal">
    <div class="modal-dialog">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h5 class="modal-title">流水类型详情</h5>
                <button type="button" class="btn-close" @onclick="CloseDetailModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedType != null)
                {
                    <div><strong>名称：</strong> @selectedType.Name</div>
                    <div><strong>描述：</strong> @selectedType.Description</div>
                    <div><strong>创建时间：</strong> @selectedType.CreateAt.ToString("yyyy-MM-dd HH:mm")</div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseDetailModal">关闭</button>
            </div>
        </div>
    </div>
</div>

<!-- 编辑弹窗 -->
<div class="modal fade @(showEditModal ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" aria-modal="true" role="dialog" @onclick="CloseEditModal">
    <div class="modal-dialog">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h5 class="modal-title">编辑流水类型</h5>
                <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
            </div>
            <div class="modal-body">
                @if (editType != null)
                {
                    <div class="mb-3">
                        <label class="form-label">名称</label>
                        <input class="form-control" @bind="editType.Name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">描述</label>
                        <input class="form-control" @bind="editType.Description" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveEdit">保存</button>
                <button class="btn btn-secondary" @onclick="CloseEditModal">取消</button>
            </div>
        </div>
    </div>
</div>

<!-- 新增弹窗 -->
<div class="modal fade @(showAddModal ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" aria-modal="true" role="dialog" @onclick="CloseAddModal">
    <div class="modal-dialog">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h5 class="modal-title">新增流水类型</h5>
                <button type="button" class="btn-close" @onclick="CloseAddModal"></button>
            </div>
            <div class="modal-body">
                @if (addType != null)
                {
                    <div class="mb-3">
                        <label class="form-label">名称</label>
                        <input class="form-control" @bind="addType.Name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">描述</label>
                        <input class="form-control" @bind="addType.Description" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveAdd">保存</button>
                <button class="btn btn-secondary" @onclick="CloseAddModal">取消</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GiftFlowTypeEntity>? types;
    private int pageIndex = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private string search = string.Empty;

    private GiftFlowTypeEntity? selectedType;
    private bool showDetailModal = false;

    private GiftFlowTypeEntity? editType;
    private bool showEditModal = false;

    private GiftFlowTypeEntity? addType;
    private bool showAddModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var query = $"gift-flow-type/list?search={search}&pageIndex={pageIndex}&pageSize={pageSize}";
        var result = await ApiService.GetAsync<BerryResult<List<GiftFlowTypeEntity>>>(query);
        types = result?.Data ?? new List<GiftFlowTypeEntity>();
        totalPages = (result?.TotalCount / pageSize) ?? 1;
    }

    private async Task OnSearch()
    {
        pageIndex = 1;
        await LoadData();
    }

    private async Task PrevPage()
    {
        if (pageIndex > 1)
        {
            pageIndex--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (pageIndex < totalPages)
        {
            pageIndex++;
            await LoadData();
        }
    }

    private void ShowDetail(GiftFlowTypeEntity type)
    {
        selectedType = type;
        showDetailModal = true;
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedType = null;
    }

    private void ShowEdit(GiftFlowTypeEntity type)
    {
        editType = new GiftFlowTypeEntity
        {
            Id = type.Id,
            Name = type.Name,
            Description = type.Description
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editType = null;
    }

    private async Task SaveEdit()
    {
        if (editType != null)
        {
            var result = await ApiService.PutAsync<GiftFlowTypeEntity>("gift-flow-type/update", editType);
            await LoadData();
            CloseEditModal();
        }
    }

    private void ShowAdd()
    {
        addType = new GiftFlowTypeEntity();
        showAddModal = true;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
        addType = null;
    }

    private async Task SaveAdd()
    {
        if (addType != null)
        {
            var result = await ApiService.PostAsync<GiftFlowTypeEntity>("gift-flow-type/create", addType);
            await LoadData();
            CloseAddModal();
        }
    }
}
